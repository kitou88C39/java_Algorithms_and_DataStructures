import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        // 入力を受け取る
        int n = sc.nextInt(); // 数列の要素数 n
        int[] a = new int[n]; // 要素数 n の配列 a を宣言
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt(); // 配列 a の各要素を読み込む
        }

        // 答えを保存する変数を用意する
        // 問題の保証により偶数が必ず含まれるため、初期値は0でも問題ないが、
        // 見つかった際に必ず上書きされる
        int indexOfEven = 0;


        // 配列の全要素をチェックするループ
        for (int i = 0; i < n; i++) {
            if (a[i] % 2 == 0) { // 現在の要素が偶数であるか判定 (2で割った余りが0なら偶数)
                // インデックスを保存してループを抜ける
                indexOfEven = i + 1; // 0始まりのインデックスを1始まりの「何番目」に変換
                break; // 最初の偶数を見つけたらそれ以降は探す必要がないのでループを抜ける
            }
        }

        // 答えを出力する
        System.out.println(indexOfEven);
        sc.close(); // Scannerを閉じる（リソース解放のため）

        for (int i = 0; i < n; i++){

            a[i] = sc.nextInt(); 



           if(a[i] % 2 == 0){

               // 変数の宣言は不要、既存の indexOfEven に代入
               indexOfEven = i + 1; // 0始まりのインデックスを1番目からの位置に変換
               break; // 最初の偶数を見つけたらループを抜ける
           }
        }
        // ★修正点2: タイプミスを修正 (indexOfEvent -> indexOfEven)
        System.out.println(indexOfEven); 

        sc.close(); // Scannerを閉じる（リソースリークを防ぐた
               int indexOfEven = i + 1;
           break;

        }



    }
    System.out.println(indexOfEvent);


    }
}
